{"version":3,"sources":["components/SinglePodcast.js","reducers/actions.js","reducers/index.js","reducers/actionCreators.js","store.js","components/PodcastsList.js","components/FavoritesList.js","views/PodcastPage.js","App.js","reportWebVitals.js","index.js"],"names":["SinglePodcast","props","onDragStart","event","dataTransfer","setData","JSON","stringify","state","podcast","toggleAudio","console","log","query","listName","name","podcastAudio","document","querySelector","playing","pauseAudio","playAudio","updateCurrentlyPlaying","audio","pause","setState","play","update","bind","Card","id","this","className","draggable","Header","as","Body","Row","Col","lg","md","sm","xs","Img","src","image","alt","onClick","Title","title","Text","description","Link","href","source","React","Component","GET_PODCASTS","GOT_PODCASTS","FAVORITES","ADD_FAVORITE","REMOVE_FAVORITE","DRAG_LEAVE","DRAG_ENTER","PLAY","PAUSE","CURRENTLY_PLAYING","UPDATE_CURRENTLY_PLAYING","initialState","podcasts","loading","paused","currentlyPlaying","favorites","removeFav","getPodcasts","data","type","gotPodcasts","payload","addFavorite","removeFavorite","dragLeave","dragEnter","dispatch","a","error","peristedState","serializedState","localStorage","getItem","parse","loadFromLocalStorage","store","createStore","action","applyMiddleware","thunkMiddleware","loggingMiddleware","subscribe","setItem","saveToLocalStorage","getState","PodcastsList","onPodcastClicked","singlePodcast","fetchPodcasts","podcastList","undefined","map","ref","length","connect","url","process","axios","get","FavoritesList","onDragOver","preventDefault","onDrop","getData","favoriteList","filter","elem","updateFavorites","concat","onDragLeave","target","updateDragLeave","onDragEnter","updateDragEnter","onDragEnd","newList","deleteFavorite","PodcastPage","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2SAQqBA,E,kDACpB,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAgBPC,YAAc,SAACC,GACdA,EAAMC,aAAaC,QAAQ,OAAQC,KAAKC,UAAU,EAAKC,MAAMC,WAlB3C,EAwBnBC,YAAc,SAACP,GACdQ,QAAQC,IAAIT,GACZ,IAAMU,EAAQ,IAAM,EAAKL,MAAMM,SAAW,SAAW,EAAKN,MAAMC,QAAQM,KAAO,oBAEzEC,EAAeC,SAASC,cAAcL,GAC5CF,QAAQC,IAAI,eAAgBI,GAExB,EAAKR,MAAMW,QACd,EAAKC,WAAWJ,GAEhB,EAAKK,UAAUL,GAGhB,EAAKR,MAAMc,uBAAuBT,IArChB,EA2CnBO,WAAa,SAACG,GACbA,EAAMC,QACN,EAAKC,SAAS,CAAEN,SAAS,KA7CP,EAmDnBE,UAAY,SAACE,GACZA,EAAMG,OACN,EAAKD,SAAS,CAAEN,SAAS,KAnDzB,EAAKX,MAAQ,CACZW,SAAS,EACTV,QAASR,EAAMQ,QACfK,SAAUb,EAAMa,SAChBQ,uBAAwBrB,EAAM0B,QAG/B,EAAKzB,YAAc,EAAKA,YAAY0B,KAAjB,gBACnB,EAAKlB,YAAc,EAAKA,YAAYkB,KAAjB,gBAVD,E,0CAwDnB,WACC,OACC,eAACC,EAAA,EAAD,CACCC,GAAIC,KAAKvB,MAAMC,QAAQM,KACvBiB,UAAU,2BACVC,WAAS,EACT/B,YAAa6B,KAAK7B,YAJnB,UAMC,cAAC2B,EAAA,EAAKK,OAAN,CAAaC,GAAG,KAAKH,UAAU,sBAA/B,SACED,KAAKvB,MAAMC,QAAQM,OAErB,cAACc,EAAA,EAAKO,KAAN,UACC,qBAAKJ,UAAU,gCAAf,SACC,eAACK,EAAA,EAAD,WACC,eAACC,EAAA,EAAD,CAAKN,UAAU,6BAA6BO,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAApE,UACC,cAACb,EAAA,EAAKc,IAAN,CACCC,IAC8B,KAA7Bb,KAAKvB,MAAMC,QAAQoC,MAClB,4BAEAd,KAAKvB,MAAMC,QAAQoC,MAGrBC,IAAKf,KAAKvB,MAAMC,QAAQM,OAEzB,sBAAKiB,UAAU,wBAAf,UACC,wBAAQA,UAAU,YAAYe,QAAShB,KAAKrB,YAA5C,SACEqB,KAAKvB,MAAMW,QAAU,cAAC,IAAD,IAAoB,cAAC,IAAD,MAE3C,uBAAOa,UAAU,gBAAgBY,IAAKb,KAAKvB,MAAMC,QAAQc,cAG3D,eAACe,EAAA,EAAD,CAAKN,UAAU,8BAA8BO,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAArE,UACC,eAACb,EAAA,EAAKmB,MAAN,CAAYhB,UAAU,+BAAtB,4BACiBD,KAAKvB,MAAMC,QAAQwC,SAEpC,eAACpB,EAAA,EAAKqB,KAAN,CAAWlB,UAAU,6BAArB,kCACuBD,KAAKvB,MAAMC,QAAQ0C,eAE1C,cAACtB,EAAA,EAAKuB,KAAN,CAAWpB,UAAU,qBAAqBqB,KAAMtB,KAAKvB,MAAMC,QAAQ6C,OAAnE,mE,GAhGmCC,IAAMC,W,yFCJpCC,EAAe,eAEfC,EAAe,eAEfC,EAAY,YAEZC,EAAe,eAEfC,EAAkB,kBAElBC,EAAa,aAEbC,EAAa,aAEbC,EAAO,OAEPC,EAAQ,QAERC,EAAoB,oBAEpBC,EAA2B,2BCNlCC,EAAe,CACpBC,SAAU,GACVC,SAAS,EACTnD,SAAS,EACToD,QAAQ,EACRC,iBAAkB,KAClBC,UAAW,GACXC,WAAW,GCPCC,EAAc,SAACC,GAAD,MAAW,CACrCC,KAAMpB,IAGMqB,EAAc,SAACF,GAAD,MAAW,CACrCC,KAAMnB,EACNqB,QAASH,IAQGI,EAAc,SAACJ,GAAD,MAAW,CACrCC,KAAMjB,EACNmB,QAASH,IAGGK,EAAiB,SAACL,GAAD,MAAW,CACxCC,KAAMhB,EACNkB,QAASH,IAGGM,EAAY,SAACN,GAAD,MAAW,CACnCC,KAAMf,EACNiB,QAASH,IAGGO,EAAY,SAACP,GAAD,MAAW,CACnCC,KAAMd,EACNgB,QAASH,IAaGJ,EAAmB,SAACI,GAAD,MAAW,CAC1CC,KAAMX,EACNa,QAASH,IC2BGtD,EAAyB,SAACsD,GACtC,8CAAO,WAAOQ,GAAP,SAAAC,EAAA,sDACN,IACCD,EAASZ,EAAiBI,IACzB,MAAOU,GACR3E,QAAQC,IAAI,yDAA0D0E,GACtE3E,QAAQ2E,MAAMA,GALT,2CAAP,uDA4CKC,EA/BuB,WAC5B,IACC,IAAMC,EAAkBC,aAAaC,QAAQ,UAC7C,GAAwB,OAApBF,EACH,OAED,OAAOlF,KAAKqF,MAAMH,GACjB,MAAOF,GAGR,OAFA3E,QAAQ2E,MAAMA,QACd3E,QAAQC,IAAI,wDAsBQgF,GAEhBC,EAAQC,aF9GgB,WAAmC,IAAlCtF,EAAiC,uDAAzB4D,EAAc2B,EAAW,uCAC/D,OAAQA,EAAOlB,MACd,KAAKpB,EACJ,OAAO,2BAAKjD,GAAZ,IAAmB8D,SAAS,IAC7B,KAAKZ,EACJ,OAAO,2BAAKlD,GAAZ,IAAmB8D,SAAS,EAAOD,SAAU0B,EAAOhB,QAAQV,WAC7D,KAAKV,EACJ,OAAO,2BAAKnD,GAAZ,IAAmB8D,SAAS,EAAMG,UAAWsB,EAAOhB,UACrD,KAAKnB,EAEL,KAAKC,EACJ,OAAO,2BAAKrD,GAAZ,IAAmBiE,UAAWsB,EAAOhB,UACtC,KAAKjB,EAEL,KAAKC,EACJ,OAAO,2BAAKvD,GAAZ,IAAmBkE,UAAWqB,EAAOhB,UACtC,KAAKf,EACJ,OAAO,2BAAKxD,GAAZ,IAAmBW,QAAS4E,EAAOhB,UACpC,KAAKd,EACJ,OAAO,2BAAKzD,GAAZ,IAAmB+D,OAAQwB,EAAOhB,UACnC,KAAKb,EAEL,KAAKC,EACJ,OAAO,2BAAK3D,GAAZ,IAAmBgE,iBAAkBuB,EAAOhB,UAC7C,QACC,OAAOvE,KEqFgC+E,EAAeS,YAAgBC,IAAiBC,MAE1FL,EAAMM,WAAU,YAlBW,SAAC3F,GAC3B,IACC,IAAMgF,EAAkBlF,KAAKC,UAAUC,GACvCiF,aAAaW,QAAQ,SAAUZ,GAC9B,MAAOF,GACR3E,QAAQ2E,MAAMA,GACd3E,QAAQC,IAAI,wDAabyF,CAAmBR,EAAMS,eAGXT,QCvITU,G,4MAYLC,iBAAmB,SAAC/F,GAAa,IAC1B+D,EAAqB,EAAKvE,MAA1BuE,iBAGN,GAFA7D,QAAQC,IAAI,mBAAoB4D,GAE3BA,GAGE,GAAIA,IAAqB/D,EAAS,CAGxC,IAAMO,EAAeC,SAASC,cAAcsD,GAC5C7D,QAAQC,IAAII,GACZ,EAAKyF,cAAcrF,WAAWJ,GAC9B,EAAKf,MAAMqB,uBAAuBb,SAPlC,EAAKR,MAAMqB,uBAAuBb,I,uDAjBpC,WACCsB,KAAK9B,MAAMyG,kB,oBA+BZ,WAAU,IAAD,SACuB3E,KAAK9B,MAA9BqE,EADE,EACFA,QAASqC,EADP,EACOA,YACf,OAAIrC,EAAgB,mDACAsC,IAAhBD,IACHA,EAAc,IAId,eAACrE,EAAA,EAAD,CAA8BR,GAAG,eAAeE,UAAU,cAAcO,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAhG,UACC,oBAAIV,UAAU,cAAd,+BACA,uBACC2E,EAAYE,KAAI,SAACpG,GACjB,OACC,cAAC,EAAD,CAECqG,IAAK,SAACL,GAAD,OAAoB,EAAKA,cAAgBA,GAC9ChG,QAASA,EACTK,SAAQ,eACRa,OAAQ,EAAK6E,kBAJR/F,EAAQM,WANP4F,EAAYI,a,GAzCExD,IAAMC,WA8ElBwD,gBAdS,SAACxG,GAAD,MAAY,CACnC8D,QAAS9D,EAAM8D,QACfqC,YAAanG,EAAM6D,SACnBG,iBAAkBhE,EAAMgE,qBAOE,SAACY,GAAD,MAAe,CACzCsB,cAAe,kBAAMtB,EDjErB,uCAAO,WAAOA,GAAP,mBAAAC,EAAA,sEAELD,EAAST,GACHsC,EAHD,UAGUC,wJAHV,SAIkBC,IAAMC,IAAIH,GAJ5B,gBAIGrC,EAJH,EAIGA,KACRQ,EAASN,EAAYF,IALhB,kDAOLjE,QAAQC,IAAI,6CAAZ,MACAD,QAAQ2E,MAAR,MARK,0DAAP,wDCkEAhE,uBAAwB,SAACsD,GAAD,OAAUQ,EAAS9D,EAAuBsD,QAEpDoC,CAA6CT,IC7EtDc,G,4MAILC,WAAa,SAACnH,GACbA,EAAMoH,kB,EASPC,OAAS,SAACrH,GACTA,EAAMoH,iBACN,IAAI3C,EAAOzE,EAAMC,aAAaqH,QAAQ,QACtC7C,EAAOtE,KAAKqF,MAAMf,GAElBjE,QAAQC,IAAI,sBAAuBgE,GALhB,IAWb8C,EAAiB,EAAKzH,MAAtByH,aAGmB,IAFTA,EAAaC,QAAO,SAACC,GAAD,OAAUA,EAAK7G,OAAS6D,EAAK7D,QAEnDgG,QAKb,EAAK9G,MAAM4H,gBAAgBH,EAAaI,OAAOlD,K,EAIjDmD,YAAc,SAAC5H,GACU,kBAApBA,EAAM6H,OAAOlG,KAChBnB,QAAQC,IAAIT,EAAM6H,OAAQ,cAE1B,EAAK/H,MAAMgI,iBAAgB,K,EAO7BC,YAAc,SAAC/H,GACU,kBAApBA,EAAM6H,OAAOlG,KAChBnB,QAAQC,IAAIT,EAAM6H,OAAQ,cAE1B,EAAK/H,MAAMkI,iBAAgB,K,EAI7BC,UAAY,SAACjI,GACZ,IAAI+E,EAAY,EAAKjF,MAAMyE,UAK3B,GAHA/D,QAAQC,IAAI,aAAcsE,GAC1BvE,QAAQC,IAAIT,EAAM6H,QAEd9C,EAAW,CACdvE,QAAQC,IAAI,4BADE,IAGR8G,EAAiB,EAAKzH,MAAtByH,aACFW,EAAUX,EAAaC,QAAO,SAACC,GAAD,OAAUA,EAAK7G,OAASZ,EAAM6H,OAAOlG,MACvEnB,QAAQC,IAAI8G,EAAcW,GAC1B,EAAKpI,MAAMqI,eAAeD,K,EAW5B7B,iBAAmB,SAAC/F,GAAa,IAC1B+D,EAAqB,EAAKvE,MAA1BuE,iBAGN,GAFA7D,QAAQC,IAAI,mBAAoB4D,GAE3BA,GAGE,GAAIA,IAAqB/D,EAAS,CAGxC,IAAMO,EAAeC,SAASC,cAAcsD,GAC5C7D,QAAQC,IAAII,GACZ,EAAKyF,cAAcrF,WAAWJ,GAC9B,EAAKf,MAAMqB,uBAAuBb,SAPlC,EAAKR,MAAMqB,uBAAuBb,I,4CAepC,WAAU,IAAD,SACwBsB,KAAK9B,MAA/BqE,EADE,EACFA,QAASoD,EADP,EACOA,aACf,OAAIpD,EAAgB,mDACCsC,IAAjBc,IACHA,EAAe,IAIf,eAACpF,EAAA,EAAD,CACCR,GAAG,gBACHE,UAAU,cACVwF,OAAQzF,KAAKyF,OACbF,WAAYvF,KAAKuF,WACjBS,YAAahG,KAAKgG,YAClBG,YAAanG,KAAKmG,YAClBE,UAAWrG,KAAKqG,UAChB7F,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IAXJ,UAaC,oBAAIV,UAAU,cAAd,uBACA,uBACC0F,EAAab,KAAI,SAACpG,GAClB,OACC,cAAC,EAAD,CAECqG,IAAK,SAACL,GAAD,OAAoB,EAAKA,cAAgBA,GAC9ChG,QAASA,EACTK,SAAQ,gBACRa,OAAQ,EAAK6E,kBAJR/F,EAAQM,iB,GA9HQwC,IAAMC,WAkKnBwD,gBAnBS,SAACxG,GAAD,MAAY,CACnCkH,aAAclH,EAAMiE,UACpBH,QAAS9D,EAAM8D,QACfI,UAAWlE,EAAMkE,UACjBF,iBAAkBhE,EAAMgE,qBAOE,SAACY,GAAD,MAAe,CACzCyC,gBAAiB,SAACjD,GAAD,OAAUQ,EFlIG,SAACR,GAC/B,8CAAO,WAAOQ,GAAP,SAAAC,EAAA,sDACN,IACCD,EAASJ,EAAYJ,IACpB,MAAOU,GACR3E,QAAQC,IAAI,2CAA4C0E,GACxD3E,QAAQ2E,MAAMA,GALT,2CAAP,sDEiIoCuC,CAAgBjD,KACpD0D,eAAgB,SAAC1D,GAAD,OAAUQ,EFrHG,SAACR,GAC9B,8CAAO,WAAOQ,GAAP,SAAAC,EAAA,sDACN,IACCD,EAASH,EAAeL,IACvB,MAAOU,GACR3E,QAAQC,IAAI,kDAAmD0E,GAC/D3E,QAAQ2E,MAAMA,GALT,2CAAP,sDEoHmCgD,CAAe1D,KAClDqD,gBAAiB,SAACrD,GAAD,OAAUQ,EFxGG,SAACR,GAC/B,8CAAO,WAAOQ,GAAP,SAAAC,EAAA,sDACN,IACCD,EAASF,EAAUN,IAClB,MAAOU,GACR3E,QAAQC,IAAI,mDAAoD0E,GAChE3E,QAAQ2E,MAAMA,GALT,2CAAP,sDEuGoC2C,CAAgBrD,KACpDuD,gBAAiB,SAACvD,GAAD,OAAUQ,EF3FG,SAACR,GAC/B,8CAAO,WAAOQ,GAAP,SAAAC,EAAA,sDACN,IACCD,EAASD,EAAUP,IAClB,MAAOU,GACR3E,QAAQC,IAAI,mDAAoD0E,GAChE3E,QAAQ2E,MAAMA,GALT,2CAAP,sDE0FoC6C,CAAgBvD,KACpDtD,uBAAwB,SAACsD,GAAD,OAAUQ,EAAS9D,EAAuBsD,QAGpDoC,CAA6CK,ICnKvCkB,G,4JACpB,WACC,OACC,sBAAKzG,GAAG,cAAR,UACC,sBAAKE,UAAU,qBAAf,UACC,0CACA,qcAQD,eAACK,EAAA,EAAD,CAAKL,UAAU,kBAAf,UACC,cAAC,GAAD,IACA,cAAC,GAAD,c,GAhBoCuB,IAAMC,WCKhCgF,GAVH,WACX,OACC,cAAC,IAAD,CAAQC,SAAUvB,cAAlB,SACC,cAAC,IAAD,UACC,cAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,IAAIC,UAAWL,UCItBM,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCGdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,IAAD,CAAU3D,MAAOA,EAAjB,SACC,cAAC,GAAD,QAGF5E,SAASwI,eAAe,SAMzBZ,O","file":"static/js/main.ccdfcd2e.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Row, Col } from 'react-bootstrap';\nimport { FiPlayCircle } from 'react-icons/fi';\nimport { FiPauseCircle } from 'react-icons/fi';\n\n/**\n * A functional component for the creation of a single podcast.\n */\nexport default class SinglePodcast extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tplaying: false,\n\t\t\tpodcast: props.podcast,\n\t\t\tlistName: props.listName,\n\t\t\tupdateCurrentlyPlaying: props.update\n\t\t};\n\n\t\tthis.onDragStart = this.onDragStart.bind(this);\n\t\tthis.toggleAudio = this.toggleAudio.bind(this);\n\t}\n\n\t/**\n   * Sets the drag operation's drag data to the specified data and type.\n   * Stringifies the podcast Object and sets it as the data.\n   */\n\tonDragStart = (event) => {\n\t\tevent.dataTransfer.setData('text', JSON.stringify(this.state.podcast));\n\t};\n\n\t/**\n   * Toggles the podcast, whose audio has been clicked, to play or pause,\n   */\n\ttoggleAudio = (event) => {\n\t\tconsole.log(event);\n\t\tconst query = '#' + this.state.listName + \" [id='\" + this.state.podcast.name + \"'] .podcast_audio\";\n\n\t\tconst podcastAudio = document.querySelector(query);\n\t\tconsole.log('podcastAudio', podcastAudio);\n\n\t\tif (this.state.playing) {\n\t\t\tthis.pauseAudio(podcastAudio);\n\t\t} else {\n\t\t\tthis.playAudio(podcastAudio);\n\t\t}\n\n\t\tthis.state.updateCurrentlyPlaying(query);\n\t};\n\n\t/**\n   * Pauses audio.\n   */\n\tpauseAudio = (audio) => {\n\t\taudio.pause();\n\t\tthis.setState({ playing: false });\n\t};\n\n\t/**\n   * Plays audio.\n   */\n\tplayAudio = (audio) => {\n\t\taudio.play();\n\t\tthis.setState({ playing: true });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Card\n\t\t\t\tid={this.state.podcast.name}\n\t\t\t\tclassName=\"single_podcast_container\"\n\t\t\t\tdraggable\n\t\t\t\tonDragStart={this.onDragStart}\n\t\t\t>\n\t\t\t\t<Card.Header as=\"h3\" className=\"single_podcast_name\">\n\t\t\t\t\t{this.state.podcast.name}\n\t\t\t\t</Card.Header>\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<div className=\"single_podcast_info_container\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className=\"single_podcast_left_column\" lg=\"3\" md=\"3\" sm=\"3\" xs=\"4\">\n\t\t\t\t\t\t\t\t<Card.Img\n\t\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\t\tthis.state.podcast.image === '' ? (\n\t\t\t\t\t\t\t\t\t\t\t'../images/placeholder.png'\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\tthis.state.podcast.image\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\talt={this.state.podcast.name}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"single_podcast_player\">\n\t\t\t\t\t\t\t\t\t<button className=\"audio_Btn\" onClick={this.toggleAudio}>\n\t\t\t\t\t\t\t\t\t\t{this.state.playing ? <FiPauseCircle /> : <FiPlayCircle />}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<audio className=\"podcast_audio\" src={this.state.podcast.audio} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col className=\"single_podcast_right_column\" lg=\"9\" md=\"9\" sm=\"9\" xs=\"8\">\n\t\t\t\t\t\t\t\t<Card.Title className=\"single_podcast_episode_title\">\n\t\t\t\t\t\t\t\t\tEpisode Title: {this.state.podcast.title}\n\t\t\t\t\t\t\t\t</Card.Title>\n\t\t\t\t\t\t\t\t<Card.Text className=\"single_podcast_description\">\n\t\t\t\t\t\t\t\t\tPodcast Description: {this.state.podcast.description}\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t<Card.Link className=\"single_podcast_url\" href={this.state.podcast.source}>\n\t\t\t\t\t\t\t\t\tClick here to visit the Podcast Home\n\t\t\t\t\t\t\t\t</Card.Link>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</div>\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n","/**\n * Stores all the actions for Redux.\n */\n\nexport const GET_PODCASTS = 'GET_PODCASTS';\n\nexport const GOT_PODCASTS = 'GOT_PODCASTS';\n\nexport const FAVORITES = 'FAVORITES';\n\nexport const ADD_FAVORITE = 'ADD_FAVORITE';\n\nexport const REMOVE_FAVORITE = 'REMOVE_FAVORITE';\n\nexport const DRAG_LEAVE = 'DRAG_LEAVE';\n\nexport const DRAG_ENTER = 'DRAG_ENTER';\n\nexport const PLAY = 'PLAY';\n\nexport const PAUSE = 'PAUSE';\n\nexport const CURRENTLY_PLAYING = 'CURRENTLY_PLAYING';\n\nexport const UPDATE_CURRENTLY_PLAYING = 'UPDATE_CURRENTLY_PLAYING';\n","import {\n\tGET_PODCASTS,\n\tGOT_PODCASTS,\n\tFAVORITES,\n\tADD_FAVORITE,\n\tREMOVE_FAVORITE,\n\tDRAG_LEAVE,\n\tPLAY,\n\tPAUSE,\n\tCURRENTLY_PLAYING,\n\tDRAG_ENTER,\n\tUPDATE_CURRENTLY_PLAYING\n} from './actions';\n\n/**\n * Reducer stores all the states used by the react componenets.\n */\n\nconst initialState = {\n\tpodcasts: [],\n\tloading: true,\n\tplaying: false,\n\tpaused: false,\n\tcurrentlyPlaying: null,\n\tfavorites: [],\n\tremoveFav: false\n};\n\nexport const podcastReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase GET_PODCASTS:\n\t\t\treturn { ...state, loading: true };\n\t\tcase GOT_PODCASTS:\n\t\t\treturn { ...state, loading: false, podcasts: action.payload.podcasts };\n\t\tcase FAVORITES:\n\t\t\treturn { ...state, loading: true, favorites: action.payload };\n\t\tcase ADD_FAVORITE:\n\t\t\treturn { ...state, favorites: action.payload };\n\t\tcase REMOVE_FAVORITE:\n\t\t\treturn { ...state, favorites: action.payload };\n\t\tcase DRAG_LEAVE:\n\t\t\treturn { ...state, removeFav: action.payload };\n\t\tcase DRAG_ENTER:\n\t\t\treturn { ...state, removeFav: action.payload };\n\t\tcase PLAY:\n\t\t\treturn { ...state, playing: action.payload };\n\t\tcase PAUSE:\n\t\t\treturn { ...state, paused: action.payload };\n\t\tcase CURRENTLY_PLAYING:\n\t\t\treturn { ...state, currentlyPlaying: action.payload };\n\t\tcase UPDATE_CURRENTLY_PLAYING:\n\t\t\treturn { ...state, currentlyPlaying: action.payload };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","import {\n\tGET_PODCASTS,\n\tGOT_PODCASTS,\n\tFAVORITES,\n\tADD_FAVORITE,\n\tREMOVE_FAVORITE,\n\tDRAG_LEAVE,\n\tDRAG_ENTER,\n\tPLAY,\n\tPAUSE,\n\tCURRENTLY_PLAYING,\n\tUPDATE_CURRENTLY_PLAYING\n} from './actions';\n\n/**\n * Stores all the action creators to be dispatched to the reducer. \n */\n\nexport const getPodcasts = (data) => ({\n\ttype: GET_PODCASTS\n});\n\nexport const gotPodcasts = (data) => ({\n\ttype: GOT_PODCASTS,\n\tpayload: data\n});\n\nexport const Favorites = (data) => ({\n\ttype: FAVORITES,\n\tpayload: data\n});\n\nexport const addFavorite = (data) => ({\n\ttype: ADD_FAVORITE,\n\tpayload: data\n});\n\nexport const removeFavorite = (data) => ({\n\ttype: REMOVE_FAVORITE,\n\tpayload: data\n});\n\nexport const dragLeave = (data) => ({\n\ttype: DRAG_LEAVE,\n\tpayload: data\n});\n\nexport const dragEnter = (data) => ({\n\ttype: DRAG_ENTER,\n\tpayload: data\n});\n\nexport const playing = (data) => ({\n\ttype: PLAY,\n\tpayload: data\n});\n\nexport const paused = (data) => ({\n\ttype: PAUSE,\n\tpayload: data\n});\n\nexport const currentlyPlaying = (data) => ({\n\ttype: CURRENTLY_PLAYING,\n\tpayload: data\n});\n\nexport const updateCurrentlyPlaying = (data) => ({\n\ttype: UPDATE_CURRENTLY_PLAYING,\n\tpayload: data\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport loggingMiddleware from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport axios from 'axios';\nimport { podcastReducer } from './reducers/index';\nimport {\n\tgetPodcasts,\n\tgotPodcasts,\n\taddFavorite,\n\tremoveFavorite,\n\tdragLeave,\n\tdragEnter,\n\tcurrentlyPlaying\n} from './reducers/actionCreators';\n\n/**\n * Redux thunk that makes an api call to populate the PodcastList React componenet.\n */\nexport const fetchPodcasts = () => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tdispatch(getPodcasts);\n\t\t\tconst url = `${process.env.REACT_APP_API}`;\n\t\t\tconst { data } = await axios.get(url);\n\t\t\tdispatch(gotPodcasts(data));\n\t\t} catch (error) {\n\t\t\tconsole.log('There was a problem in fetchPodcasts thunk', error);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n};\n\n/**\n * Creates an update for the FavoritesList.\n */\nexport const updateFavorites = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tdispatch(addFavorite(data));\n\t\t} catch (error) {\n\t\t\tconsole.log('There was a problem in addFavorite thunk', error);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n};\n\n/**\n * Removes an element from the FavoritesList.\n */\nexport const deleteFavorite = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tdispatch(removeFavorite(data));\n\t\t} catch (error) {\n\t\t\tconsole.log('There was a problem in the deleteFavorite thunk', error);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n};\n\n/**\n * Detects if an element has been dragged out of the FavoriteList.\n */\nexport const updateDragLeave = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tdispatch(dragLeave(data));\n\t\t} catch (error) {\n\t\t\tconsole.log('There was a problem in the updateDragLeave thunk', error);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n};\n\n/**\n * Detects if an element has been dragged in the FavoriteList.\n */\nexport const updateDragEnter = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tdispatch(dragEnter(data));\n\t\t} catch (error) {\n\t\t\tconsole.log('There was a problem in the updateDragEnter thunk', error);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n};\n\n/**\n * Updates the state of currentlyPlaying so it reflects the currently played podcast.\n */\nexport const updateCurrentlyPlaying = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tdispatch(currentlyPlaying(data));\n\t\t} catch (error) {\n\t\t\tconsole.log('There was a problem in the fetchCurrentlyPlaying thunk', error);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n};\n\n/**\n * Loads the state From Local Storage.\n */\nconst loadFromLocalStorage = () => {\n\ttry {\n\t\tconst serializedState = localStorage.getItem('states');\n\t\tif (serializedState === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn JSON.parse(serializedState);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tconsole.log('There was a problem in the loadState function/redux');\n\t\treturn undefined;\n\t}\n};\n\n/**\n * Loads the state to Local Storage.\n */\nconst saveToLocalStorage = (state) => {\n\ttry {\n\t\tconst serializedState = JSON.stringify(state);\n\t\tlocalStorage.setItem('states', serializedState);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tconsole.log('There was a problem int he saveState function/redux');\n\t}\n};\n\n/**\n * Creates the redux store and also subscribes the store to local storage in order to \n * persist the state on page reload.\n */\nconst peristedState = loadFromLocalStorage();\n\nconst store = createStore(podcastReducer, peristedState, applyMiddleware(thunkMiddleware, loggingMiddleware));\n\nstore.subscribe(() => {\n\tsaveToLocalStorage(store.getState());\n});\n\nexport default store;\n","import React from 'react';\nimport SinglePodcast from './SinglePodcast';\nimport { Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { fetchPodcasts, updateCurrentlyPlaying } from '../store';\n\n/**\n * Component that creates and displays a list of all podcasts available.\n */\nclass PodcastsList extends React.Component {\n\tcomponentDidMount() {\n\t\tthis.props.fetchPodcasts();\n\t}\n\n\t/**\n   * When a podcast's audio-player button is clicked, we check the state of \n   * 'currentlyPlaying.' If 'currentlyPlaying' is undefined we set it to be the \n   * podcast that we clicked to play. If 'currentlyPlaying' is not the same as the \n   * podcast we just clicked to play, we pause the previous podcast that was playing \n   * and update the state of 'currentPlaying'.\n   */\n\tonPodcastClicked = (podcast) => {\n\t\tlet { currentlyPlaying } = this.props;\n\t\tconsole.log('currentlyPlaying', currentlyPlaying);\n\n\t\tif (!currentlyPlaying) {\n\t\t\t// enter if-statement when nothing is currently playing\n\t\t\tthis.props.updateCurrentlyPlaying(podcast);\n\t\t} else if (currentlyPlaying !== podcast) {\n\t\t\t// enter else-if statement when 'currentlyPlaying' is different than the last clicked podcast; pause the previously 'currentlyPlaying' audio\n\n\t\t\tconst podcastAudio = document.querySelector(currentlyPlaying);\n\t\t\tconsole.log(podcastAudio);\n\t\t\tthis.singlePodcast.pauseAudio(podcastAudio);\n\t\t\tthis.props.updateCurrentlyPlaying(podcast);\n\t\t}\n\t\t// else if (currentlyPlaying === podcast) {\n\t\t//   // enter else-statement when 'currentlyPlaying' is the same as the last clicked podcast; last clicked podcast was paused\n\t\t//   this.props.updateCurrentlyPlaying(podcast);\n\t\t// }\n\t};\n\n\trender() {\n\t\tlet { loading, podcastList } = this.props;\n\t\tif (loading) return <div>Loading...</div>;\n\t\tif (podcastList === undefined) {\n\t\t\tpodcastList = [];\n\t\t}\n\n\t\treturn (\n\t\t\t<Col key={podcastList.length} id=\"podcastsList\" className=\"list_column\" lg=\"5\" md=\"5\" sm=\"5\" xs=\"5\">\n\t\t\t\t<h2 className=\"list_header\">SiriusXM Podcasts</h2>\n\t\t\t\t<hr />\n\t\t\t\t{podcastList.map((podcast) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<SinglePodcast\n\t\t\t\t\t\t\tkey={podcast.name}\n\t\t\t\t\t\t\tref={(singlePodcast) => (this.singlePodcast = singlePodcast)}\n\t\t\t\t\t\t\tpodcast={podcast}\n\t\t\t\t\t\t\tlistName={`podcastsList`}\n\t\t\t\t\t\t\tupdate={this.onPodcastClicked}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Col>\n\t\t);\n\t}\n}\n\n/**\n * Elements connecting the React component to the Redux component which holds it's \n * state.\n */\nconst mapStateToProps = (state) => ({\n\tloading: state.loading,\n\tpodcastList: state.podcasts,\n\tcurrentlyPlaying: state.currentlyPlaying\n});\n\n/**\n * Elements connecting the React component to the Redux component which creates the \n * get request and populates the component did mount stage of the lifecycle.\n */\nconst mapDispatchToProps = (dispatch) => ({\n\tfetchPodcasts: () => dispatch(fetchPodcasts()),\n\tupdateCurrentlyPlaying: (data) => dispatch(updateCurrentlyPlaying(data))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(PodcastsList);\n","import React from 'react';\nimport SinglePodcast from './SinglePodcast';\nimport { Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { updateFavorites, deleteFavorite, updateDragLeave, updateDragEnter, updateCurrentlyPlaying } from '../store';\n\n/**\n * Component that creates the user's list of favorite podcasts. Allows podcasts \n * to be dragged and dropped into the list.\n */\nclass FavoritesList extends React.Component {\n\t/**\n   * Prevents the page from reloading when a podcast is dragged into the list.\n  */\n\tonDragOver = (event) => {\n\t\tevent.preventDefault();\n\t};\n\n\t/**\n   * Prevents the page from reloading when a podcast is dropped into the list.\n   * Gets the drag operation's dropped data of the specified type.\n   * Parses the data transfered on drop, aka the podcast Object that was released.\n   * Adds the podcast Object to the state list.\n  */\n\tonDrop = (event) => {\n\t\tevent.preventDefault();\n\t\tlet data = event.dataTransfer.getData('text');\n\t\tdata = JSON.parse(data);\n\n\t\tconsole.log('dropped in dropzone', data);\n\n\t\t/** \n     * Filters through the list to check for duplicate elements whose name is \n     * equivalent to the element we want to add.\n    */\n\t\tlet { favoriteList } = this.props;\n\t\tlet duplicate = favoriteList.filter((elem) => elem.name === data.name);\n\n\t\tif (duplicate.length === 0) {\n\t\t\t/** \n       * Updates the list to contain the newly dragged in podcast and then updates the\n       * state of the parent list.\n      */\n\t\t\tthis.props.updateFavorites(favoriteList.concat(data));\n\t\t}\n\t};\n\n\tonDragLeave = (event) => {\n\t\tif (event.target.id === 'favoritesList') {\n\t\t\tconsole.log(event.target, 'drag leave');\n\n\t\t\tthis.props.updateDragLeave(true);\n\n\t\t\t// let area = event.target.getBoundingClientRect();\n\t\t\t// console.log(area);\n\t\t}\n\t};\n\n\tonDragEnter = (event) => {\n\t\tif (event.target.id === 'favoritesList') {\n\t\t\tconsole.log(event.target, 'drag enter');\n\n\t\t\tthis.props.updateDragEnter(false);\n\t\t}\n\t};\n\n\tonDragEnd = (event) => {\n\t\tlet dragLeave = this.props.removeFav;\n\n\t\tconsole.log('drag left?', dragLeave);\n\t\tconsole.log(event.target);\n\n\t\tif (dragLeave) {\n\t\t\tconsole.log('drag ended and drag left');\n\n\t\t\tlet { favoriteList } = this.props;\n\t\t\tlet newList = favoriteList.filter((elem) => elem.name !== event.target.id);\n\t\t\tconsole.log(favoriteList, newList);\n\t\t\tthis.props.deleteFavorite(newList);\n\t\t}\n\t};\n\n\t/**\n   * When a podcast's audio-player button is clicked, we check the state of \n   * 'currentlyPlaying.' If 'currentlyPlaying' is undefined we set it to be the \n   * podcast that we clicked to play. If 'currentlyPlaying' is not the same as the \n   * podcast we just clicked to play, we pause the previous podcast that was playing \n   * and update the state of 'currentPlaying'.\n  */\n\tonPodcastClicked = (podcast) => {\n\t\tlet { currentlyPlaying } = this.props;\n\t\tconsole.log('currentlyPlaying', currentlyPlaying);\n\n\t\tif (!currentlyPlaying) {\n\t\t\t// enter if-statement when nothing is currently playing\n\t\t\tthis.props.updateCurrentlyPlaying(podcast);\n\t\t} else if (currentlyPlaying !== podcast) {\n\t\t\t// enter else-if statement when 'currentlyPlaying' is different than the last clicked podcast; pause the previously 'currentlyPlaying' audio\n\n\t\t\tconst podcastAudio = document.querySelector(currentlyPlaying);\n\t\t\tconsole.log(podcastAudio);\n\t\t\tthis.singlePodcast.pauseAudio(podcastAudio);\n\t\t\tthis.props.updateCurrentlyPlaying(podcast);\n\t\t}\n\t\t// else if (currentlyPlaying === podcast) {\n\t\t//   // enter else-statement when 'currentlyPlaying' is the same as the last clicked podcast; last clicked podcast was paused\n\t\t//   this.props.updateCurrentlyPlaying(podcast);\n\t\t// }\n\t};\n\n\trender() {\n\t\tlet { loading, favoriteList } = this.props;\n\t\tif (loading) return <div>Loading...</div>;\n\t\tif (favoriteList === undefined) {\n\t\t\tfavoriteList = [];\n\t\t}\n\n\t\treturn (\n\t\t\t<Col\n\t\t\t\tid=\"favoritesList\"\n\t\t\t\tclassName=\"list_column\"\n\t\t\t\tonDrop={this.onDrop}\n\t\t\t\tonDragOver={this.onDragOver}\n\t\t\t\tonDragLeave={this.onDragLeave}\n\t\t\t\tonDragEnter={this.onDragEnter}\n\t\t\t\tonDragEnd={this.onDragEnd}\n\t\t\t\tlg=\"5\"\n\t\t\t\tmd=\"5\"\n\t\t\t\tsm=\"5\"\n\t\t\t\txs=\"5\"\n\t\t\t>\n\t\t\t\t<h2 className=\"list_header\">Favorites</h2>\n\t\t\t\t<hr />\n\t\t\t\t{favoriteList.map((podcast) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<SinglePodcast\n\t\t\t\t\t\t\tkey={podcast.name}\n\t\t\t\t\t\t\tref={(singlePodcast) => (this.singlePodcast = singlePodcast)}\n\t\t\t\t\t\t\tpodcast={podcast}\n\t\t\t\t\t\t\tlistName={`favoritesList`}\n\t\t\t\t\t\t\tupdate={this.onPodcastClicked}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Col>\n\t\t);\n\t}\n}\n\n/**\n * Elements connecting the React component to the Redux component which holds it's \n * state.\n */\nconst mapStateToProps = (state) => ({\n\tfavoriteList: state.favorites,\n\tloading: state.loading,\n\tremoveFav: state.removeFav,\n\tcurrentlyPlaying: state.currentlyPlaying\n});\n\n/**\n * Elements connecting the React component to the Redux component which creates the \n * get request and populates the component did mount stage of the lifecycle.\n */\nconst mapDispatchToProps = (dispatch) => ({\n\tupdateFavorites: (data) => dispatch(updateFavorites(data)),\n\tdeleteFavorite: (data) => dispatch(deleteFavorite(data)),\n\tupdateDragLeave: (data) => dispatch(updateDragLeave(data)),\n\tupdateDragEnter: (data) => dispatch(updateDragEnter(data)),\n\tupdateCurrentlyPlaying: (data) => dispatch(updateCurrentlyPlaying(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoritesList);\n","import React from 'react';\nimport PodcastsList from '../components/PodcastsList';\nimport FavoritesList from '../components/FavoritesList';\nimport { Row } from 'react-bootstrap';\n\n/**\n * A view of the Podcast Page, which displays a list of all podcasts available and a \n * favorites list that's populated by the user.\n */\nexport default class PodcastPage extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"PodcastPage\">\n\t\t\t\t<div className=\"PodcastPage_header\">\n\t\t\t\t\t<h1>Podcasts</h1>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tBelow is a collection of popular podcasts curated from SiriusXM. If you want to favorite any of\n\t\t\t\t\t\tthe podcasts in the list labeled 'SiriusXM Podcasts,' simply drag and drop them into the list\n\t\t\t\t\t\tlabeled 'Favorites'. If you want to remove a podcast from your favorites list, simply drag it\n\t\t\t\t\t\tout of the list and watch it disappear. Don't worry we'll also remember your favorited podcasts\n\t\t\t\t\t\tthe next time you visit this webpage.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<Row className=\"lists_container\">\n\t\t\t\t\t<PodcastsList />\n\t\t\t\t\t<FavoritesList />\n\t\t\t\t</Row>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport PodcastPage from './views/PodcastPage';\n\nconst App = () => {\n\treturn (\n\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={PodcastPage} />\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}